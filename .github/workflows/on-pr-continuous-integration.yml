name: Continuous Integration - On Pull Request

on:
  pull_request:
    branches: [ 'main' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  checks: write
  statuses: write
  contents: write
  packages: read
  pull-requests: write

jobs:
  server-build-check:
    name: "Server - Build Check"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: projects/graphql-server
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://npm.pkg.github.com'
          scope: '@knightprogrammers'
          always-auth: true
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: projects/graphql-server/node_modules
          key: graphql-server-node_modules-${{hashFiles('package-lock.json')}}
          restore-keys: graphql-server-node_modules-
      - name: Install Dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run lint
        run: npm run lint
  client-build-check:
    name: "Client - Build Check"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: projects/client
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: projects/client/node_modules
          key: client-node_modules-${{hashFiles('package-lock.json')}}
          restore-keys: client-node_modules-
      - name: Install Dependencies
        run: npm ci
      - name: Run lint
        run: npm run lint
      - name: Run prettier
        run: npm run prettier
  db-seed-build-check:
    name: "DB-Seed - Build Check"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: projects/db-seed
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://npm.pkg.github.com'
          scope: '@knightprogrammers'
          always-auth: true
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: projects/db-seed/node_modules
          key: db-seed-node_modules-${{hashFiles('package-lock.json')}}
          restore-keys: db-seed-node_modules-
      - name: Install Dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run lint
        run: npm run lint
  infra-build-check:
    name: "Infra - Build Check"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/infra
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: packages/infra/node_modules
          key: infra-node_modules-${{hashFiles('package-lock.json')}}
          restore-keys: infra-node_modules-
      - name: Install Dependencies
        run: npm ci
      - name: Run lint
        run: npm run lint
  cron-jobs-build-check:
    name: "Cron-Jobs - Build Check"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: projects/cron-jobs
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://npm.pkg.github.com'
          scope: '@knightprogrammers'
          always-auth: true
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path:  projects/cron-jobs/node_modules
          key: cron-jobs-node_modules-${{hashFiles('package-lock.json')}}
          restore-keys: cron-jobs-node_modules-
      - name: Install Dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run lint
        run: npm run lint
  integration-tests-regression:
    name: "Integration Tests - Regression"
    runs-on: ubuntu-latest
    needs: [ server-build-check, client-build-check, db-seed-build-check, infra-build-check, cron-jobs-build-check ]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Start Database
        run: docker compose up --detach --wait scipio-db
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://npm.pkg.github.com'
          scope: '@knightprogrammers'
          always-auth: true
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path:  projects/cron-jobs/node_modules
          key: cron-jobs-node_modules-${{hashFiles('package-lock.json')}}
          restore-keys: cron-jobs-node_modules-
      - name: Install Dependencies
        run: |
          cd projects/cron-jobs
          npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run Tests
        env:
          MONGO_URI: mongodb://root:password@localhost:27017/scipio-test?authSource=admin
        run: |
          cd projects/cron-jobs
          npm run test
  e2e-tests-regression:
    name: "E2E Tests - Regression"
    runs-on: ubuntu-latest
    needs: [ integration-tests-regression ]
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
      FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
      FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
      FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Run Dockers
        run: docker compose up --detach --wait --build
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: tests/e2e-tests/node_modules
          key: e2e-tests-node_modules-${{hashFiles('package-lock.json')}}
          restore-keys: e2e-tests-node_modules-
      - name: Install Dependencies
        run: |
          cd tests/e2e-tests
          npm ci
      - name: Install Playwright Browsers
        run: |
          cd tests/e2e-tests
          npx playwright install --with-deps
      - name: Run Tests
        env:
          BASE_URL: http://localhost:3000
          API_BASE_URL: http://localhost:8080
          DD_CIVISIBILITY_AGENTLESS_ENABLED: true
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
          DD_SITE: ${{ secrets.DD_SITE }}
          NODE_OPTIONS: "-r dd-trace/ci/init"
          DD_ENV: "Test"
          DD_SERVICE: "Scipio"
        run: |
          cd tests/e2e-tests
          npm run regression-test
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-report
          path: tests/e2e-tests/playwright-report/
          retention-days: 7
  create-test-env:
    name: "Create Test Environment"
    runs-on: ubuntu-latest
    needs: [ e2e-tests-regression ]
    concurrency:
      group: ${{ github.repository }}-concurrency-create-test-env
      cancel-in-progress: false
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://npm.pkg.github.com'
          scope: '@knightprogrammers'
          always-auth: true
      - name: Install scipio-infra globaly
        run: npm install -g @knightprogrammers/scipio-infra
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create environment
        run: |
          sleep 30 # Railway allows to create an environment every 30 seconds
          scipio-infra environment-create "test-${{ github.event.number }}"
        env:
          RAILWAY_USER_TOKEN: ${{ secrets.RAILWAY_USER_TOKEN }}
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
  deploy-services:
    name: Deploy ${{ matrix.label }} service
    runs-on: ubuntu-latest
    needs: [ create-test-env ]
    strategy:
      matrix:
        include:
          - key: "server"
            label: "Server"
            path: "projects/graphql-server"
          - key: "client"
            label: "Client"
            path: "projects/client"
      fail-fast: false
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://npm.pkg.github.com'
          scope: '@knightprogrammers'
          always-auth: true
      - name: Install scipio-infra globaly
        run: npm install -g @knightprogrammers/scipio-infra
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install railway cli
        run: npm i -g @railway/cli
      - name: Deploy ${{ matrix.label }} service
        run: scipio-infra deploy -s ${{ matrix.key }} -e "test-${{ github.event.number }}"
        env:
          RAILWAY_USER_TOKEN: ${{ secrets.RAILWAY_USER_TOKEN }}
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
      - name: Create Sentry release for ${{ matrix.key }}
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: "scipio-finances"
          SENTRY_PROJECT: "scipio-${{ matrix.key }}"
          SENTRY_URL: https://sentry.io/
        with:
          environment: "test-${{ github.event.number }}"
          working_directory: "./${{ matrix.path }}/"
  notify-deployment:
    name: "Notify Deployment"
    runs-on: ubuntu-latest
    needs: [ deploy-services ]
    if: success() || failure()
    environment:
      name: Test
      url: https://scipio-client-test-${{ github.event.number }}.up.railway.app
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://npm.pkg.github.com'
          scope: '@knightprogrammers'
          always-auth: true
      - name: Install scipio-infra globaly
        run: npm install -g @knightprogrammers/scipio-infra
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate comment
        run: scipio-infra generate-pr-comment -e "test-${{ github.event.number }}"
        env:
          RAILWAY_USER_TOKEN: ${{ secrets.RAILWAY_USER_TOKEN }}
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
      - name: Publish Pull Request comment
        if: success() || failure()
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: "./pr-comment.md"
          comment_tag: deploy-status
      - name: Set deployment status
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'skipped')
        run: exit 1;
